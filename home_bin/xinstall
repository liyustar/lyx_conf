#!/bin/bash

LOCAL_CONF=/home/lyx/Work/gitget/lyx_conf/config

APP=('redis' 'jdk' 'svn' 'hadoop' 'hbase')
PATTEN=("redis.*" "^jdk*" "^svn*" "hadoop.*" "hbase.*")
APPDIR=
INDEX=
URL=('http://download.redis.io/releases/redis-3.0.0.tar.gz' 'http://download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.tar.gz' '[ERROR:svn]' 'HADOOP_URL' 'HBASE_URL')
# 安装各种包的bash方法名
INSTALL_FUN=(install_redis install_jdk install_svn install_hadoop install_hbase)
# 默认的配置文件路径，配置环境变量
DEF_PROFILE="$HOME/.bashrc"
# 默认安装路径，当前路径
DEF_INSDIR='.'

# init
LEN=${#APP[@]}
for ((i=0; i<$LEN; i++)); do
    INDEX[${APP[$i]}]=$i
done

# 安装Redis
function install_redis {
PKG='redis-3.0.0.tar.gz'
PST='redis-3.0.0'
INSDIR=${1:-$DEF_INSDIR}
PROFILE=${2:-$DEF_PROFILE}
echo "install redis: $INSDIR $PROFILE"

if [ -e $PST ]; then
    echo "install failed: redis exists."
    exit 1
fi

# 如果目录不存在，则解压
xtar -x -f $PKG -d $INSDIR
make -C $INSDIR/$PST \
&& echo "# INSTALL_REDIS_DONE" >> $PROFILE  \
&& echo "export PATH=\$PATH:$PWD/$INSDIR/$PST/src" >> $PROFILE   \
&& source $PROFILE

if [ 0 -eq $? ]; then
    echo "install redis: DONE!"
else
    echo "install redis: FAILED!"
    exit 1
fi
}

# 安装JDK
function install_jdk {
PKG='jdk-7u79-linux-x64.tar.gz'
PST='jdk1.7.0_79'
INSDIR=${1:-$DEF_INSDIR}
PROFILE=${2:-$DEF_PROFILE}
echo "install jdk: $INSDIR $PROFILE"

if [ -e $PST ]; then
    echo "install failed: jdk exists."
    exit 1
fi

# 如果目录不存在，则解压
xtar -x -f $PKG -d $INSDIR
echo "# INSTALL_JDK_DONE" >> $PROFILE  \
&& echo "export JAVA_HOME=$PWD/$INSDIR/$PST" >> $PROFILE    \
&& echo "export PATH=\$PATH:\$JAVA_HOME/bin" >> $PROFILE    \
&& source $PROFILE

if [ 0 -eq $? ]; then
    echo "install jdk: DONE!"
else
    echo "install jdk: FAILED!"
    exit 1
fi
}

# 安装Hadoop
function install_hadoop {
PKG='hadoop-2.7.0.tar.gz'
PST='hadoop-2.7.0'
INSDIR=${1:-$DEF_INSDIR}
PROFILE=${2:-$DEF_PROFILE}
echo "install hadoop: $INSDIR $PROFILE"

if [ -e $PST ]; then
    echo "install failed: hadoop exists."
    exit 1
fi

# 如果目录不存在，则解压
xtar -x -f $PKG -d $INSDIR
echo "# INSTALL_HADOOP_DONE" >> $PROFILE  \
&& echo "export HADOOP_HOME=$PWD/$INSDIR/$PST" >> $PROFILE    \
&& echo "export PATH=\$PATH:\$HADOOP_HOME/bin" >> $PROFILE    \
&& echo "export PATH=\$PATH:\$HADOOP_HOME/sbin" >> $PROFILE    \
&& source $PROFILE

# Hadoop的环境准备
sed -i "s:\${JAVA_HOME}:$JAVA_HOME:" $INSDIR/$PST/etc/hadoop/hadoop-env.sh
# 复制配置文件
cp $LOCAL_CONF/hadoop/* $HADOOP_HOME/etc/hadoop

if [ 0 -eq $? ]; then
    echo "install hadoop: DONE!"
else
    echo "install hadoop: FAILED!"
    exit 1
fi
}

# 安装Hbase
function install_hbase {
PKG='hbase-1.0.1-bin.tar.gz'
PST='hbase-1.0.1'
INSDIR=${1:-$DEF_INSDIR}
PROFILE=${2:-$DEF_PROFILE}
echo "install hbase: $INSDIR $PROFILE"

if [ -e $PST ]; then
    echo "install failed: hbase exists."
    exit 1
fi

# 如果目录不存在，则解压
xtar -x -f $PKG -d $INSDIR
echo "# INSTALL_HBASE_DONE" >> $PROFILE  \
&& echo "export HBASE_HOME=$PWD/$INSDIR/$PST" >> $PROFILE    \
&& echo "export PATH=\$PATH:\$HBASE_HOME/bin" >> $PROFILE    \
&& source $PROFILE

# 复制配置文件
cp $LOCAL_CONF/hbase/* $HADOOP_HOME/conf

if [ 0 -eq $? ]; then
    echo "install hbase: DONE!"
else
    echo "install hbase: FAILED!"
    exit 1
fi
}

# 安装SVN,作配置
function install_svn {
if [ ! -e $HOME/.subversion ]; then
    echo 'error ~/.subversion not found'
    exit 1
fi

sed -i 's/.*editor-cmd =.*/editor-cmd = vim/' $HOME/.subversion/config
sed -i 's/.*diff-cmd =.*/diff-cmd = colordiff/' $HOME/.subversion/config
echo 'install_svn DONE!'
}

function usage {
echo "usage:"
echo "  xinstall -l"
echo "  xinstall -d <download_node>"
echo "  xinstall [-p <install_path>] [-e <env_path>] -i <install_node> "
echo "  -p : uncompass path, must before -i"
echo "  -e : envirnment config path, must before -i"
}

if [ $# -eq 0 ]; then
    usage
    exit 0
fi

while getopts "ld:i:p:e:" arg
do
    case $arg in
        l)  # 列表显示
            # 找APP包的目录，如果找到，则修改APPDIR参数
            for ((i=0; i<$LEN; i++)); do
                APPDIR[$i]="[NONE]"
                for j in $(ls); do
                    PAT=${PATTEN[$i]}
                    # echo "$PAT $j"
                    if [ $PAT == $j ]; then
                        APPDIR[$i]=$j
                        break
                    fi
                done
            done

            # list app
            for ((i=0; i<$LEN; i++)); do
                # echo -e "$i) ${APP[$i]}\t${APPDIR[$i]}\t${URL[$i]}"
                echo -e "$i) ${APP[$i]}\t${URL[$i]}"
            done
            ;;
        d)  # download
            URL_TO_DOWNLOAD=${URL[$OPTARG]}
            APP_TO_DOWNLOAD=${APP[$OPTARG]}
            if [ -n $URL_TO_DOWNLOAD ]; then
                echo "begin download $APP_TO_DOWNLOAD"
                wget $URL_TO_DOWNLOAD
                echo "end download $APP_TO_DOWNLOAD"
            else
                echo "error download: argument invaild"
                exit 1
            fi
            ;;
        i)  # install
            ${INSTALL_FUN[$OPTARG]}
            ;;
        p)  # set install path
            mkdir -p $OPTARG
            DEF_INSDIR=$OPTARG
            ;;
        e)  # set envirnment config path
            DEF_PROFILE=$OPTARG
            ;;
        ?)
            echo "unknow argument"
            exit 1
            ;;
    esac
done

